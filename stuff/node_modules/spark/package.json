{
  "name": "spark",
  "description": "Powerful node server starter",
  "version": "0.3.0",
  "contributors": [
    {
      "name": "Tim Caswell",
      "email": "tim@sencha.com"
    },
    {
      "name": "TJ Holowaychuk",
      "email": "tj@sencha.com"
    }
  ],
  "bin": {
    "spark": "./bin/spark"
  },
  "engines": {
    "node": ">= 0.1.100"
  },
  "readme": "# Spark\n\nSpark is a command-line tool used to start up node server instances written by [Tj Holowaychuk](http://github.com/visionmedia) and [Tim Caswell](http://github.com/creationix).  It's part of the [Connect](http://github.com/senchalabs/connect) framework, however can be used standalone with _any_ node server.\n\n## Features\n\nSpark provides the following options when starting a server.\n\n - Port/Host to listen on\n - SSL hosting with specified key/certificate\n - Automatic child process spawning for multi-process node servers that share a common port.\n - User/Group to drop to after binding (if run as root)\n - Environment modes (development/testing/production)\n - Modify the node require paths\n - Can load any of these configs from from a file (optionally grouped by env)\n - Can change the working directory before running the app\n - `--comment` option to label processes in system tools like `ps` or `htop`\n - Pass arbitrary code or environment variables to the app\n\n## Making an app spark compatible\n\nAny node server can be used with spark.  All you need to do it create a file called `app.js` that exports the instance of `http.Server` or `net.Server`.\n\nA hello-world example would look like this:\n\n    module.exports = require('http').createServer(function (req, res) {\n        res.writeHead(200, {\"Content-Type\":\"text-plain\"});\n        res.end(\"Hello World\");\n    });\n\nAnd then to run it you simply go to the folder containing the `app.js` and type:\n\n    $ spark\n\nThe output you'll see will be:\n\n    Spark server(34037) listening on http://*:3000 in development mode\n\nWhere `34037` is the process id. If you want 4 processes to balance the requests across, no problem.\n\n    $ spark -n 4\n\nAnd you'll see:\n\n    Spark server(34049) listening on http://*:3000 in development mode\n    Spark server(34050) listening on http://*:3000 in development mode\n    Spark server(34052) listening on http://*:3000 in development mode\n    Spark server(34051) listening on http://*:3000 in development mode\n\n## MIT License\n\nCopyright (c) 2010 Sencha Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.markdown",
  "_id": "spark@0.3.0",
  "dist": {
    "shasum": "e557e857a47dd2304b202d316f44fdacdcbb1190"
  },
  "_from": "spark@",
  "_resolved": "https://registry.npmjs.org/spark/-/spark-0.3.0.tgz"
}
